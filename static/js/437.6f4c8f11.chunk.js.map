{"version":3,"file":"static/js/437.6f4c8f11.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Countries/Countries.jsx","components/PhoneNumberInput/PhoneNumberInput.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectStatusFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","import sc from \"states-cities-db\";\n\nconst COUNTRIES = sc.getCountries();\n\nconst getCountryTelCode = country =>\n  country && COUNTRIES.find(({ iso }) => iso === country).prefix;\n\nexport { COUNTRIES, getCountryTelCode };\n","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Flex,\n  Icon,\n  Input,\n  Select,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport Flag from 'react-world-flags';\nimport { AsYouType } from 'libphonenumber-js';\n\nimport { getCountryTelCode } from 'components/Countries/Countries';\n\nconst PhoneNumberInput = ({\n  size,\n  value,\n  country,\n  options,\n  onChange,\n  placeholder,\n  ...rest\n}) => {\n  const [number, setNumber] = useState(value || '');\n  const [selectedCountry, setSelectedCountry] = useState(country || '');\n  const [countryCode, setCountryCode] = useState(\n    getCountryTelCode(country) || ''\n  );\n\n  useEffect(() => {\n    setSelectedCountry(country);\n    setCountryCode(getCountryTelCode(country));\n  }, [country]);\n\n  const onCountryChange = e => {\n    const value = e.target.value;\n    const code = getCountryTelCode(value);\n    const parsedNumber = new AsYouType().input(`${code}${number}`);\n\n    setCountryCode(code);\n    setSelectedCountry(value);\n    onChange(parsedNumber);\n  };\n\n  const onPhoneNumberChange = e => {\n    const value = e.target.value;\n    const parsedNumber = new AsYouType().input(`${countryCode}${value}`);\n\n    setNumber(value);\n    onChange(parsedNumber);\n  };\n\n  return (\n    <InputGroup size={size} {...rest}>\n      <InputLeftElement width=\"4rem\">\n        <Select\n          top=\"0\"\n          left=\"0\"\n          zIndex={1}\n          bottom={0}\n          opacity={0}\n          height=\"100%\"\n          position=\"absolute\"\n          value={selectedCountry}\n          onChange={onCountryChange}\n        >\n          <option value=\"\" />\n          {options.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </Select>\n        <Flex pl={2} width=\"100%\" alignItems=\"center\">\n          {selectedCountry ? (\n            <Box mr=\"4px\" width=\"50%\" flex={1}>\n              <Flag height=\"1rem\" code={selectedCountry || ''} />\n            </Box>\n          ) : (\n            <Icon name=\"phone\" />\n          )}\n          <Icon name=\"chevron-down\" />\n        </Flex>\n      </InputLeftElement>\n      <Input\n        pl=\"4rem\"\n        type=\"tel\"\n        value={number}\n        pattern=\"[0-9]\"\n        placeholder={placeholder}\n        onChange={onPhoneNumberChange}\n      />\n    </InputGroup>\n  );\n};\n\nPhoneNumberInput.defaultProps = {\n  options: [],\n  size: 'md',\n};\n\nexport default PhoneNumberInput;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormControl, FormLabel, Input, Button, Box } from '@chakra-ui/react';\n\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { COUNTRIES } from 'components/Countries/Countries';\nimport PhoneNumberInput from 'components/PhoneNumberInput/PhoneNumberInput';\n\nconst ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const countryOptions = COUNTRIES.map(({ name, iso }) => ({\n    label: name,\n    value: iso,\n  }));\n  const [value, setValue] = useState('');\n\n  const handleAddContact = e => {\n    e.preventDefault();\n\n    const form = e.target;\n    const name = e.target.name.value;\n    const number = e.target.number.value;\n    const nameOnTheList = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    const newContact = {\n      name: name,\n      number: number,\n    };\n\n    if (!nameOnTheList) {\n      dispatch(addContact(newContact));\n      form.reset();\n    } else {\n      alert(`${name} is in use. Try another name.`);\n    }\n  };\n\n  return (\n    <Box as=\"form\" onSubmit={handleAddContact} my=\"10\">\n      <PhoneNumberInput\n        value={value}\n        options={countryOptions}\n        placeholder=\"Enter phone number\"\n        onChange={value => setValue(value)}\n      />\n      <FormControl>\n        <FormLabel htmlFor=\"name\">Name</FormLabel>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          maxlength=\"30\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          placeholder=\"e.g. John Doe\"\n          required\n          mb=\"4\"\n        />\n      </FormControl>\n      <FormControl>\n        <FormLabel htmlFor=\"number\">Number</FormLabel>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          maxlength=\"30\"\n          pattern=\"(-)?\\d{1,}|(-)?\\d{1,}(\\.)\\d{1,}|(-)?\\d{1,}(\\s)(-)?\\d{1,}|(-)?\\d{1,}(\\s)(-)?\\d{1,}(\\s)(-)?\\d{1,}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          placeholder=\"e.g. 123-456-789\"\n          required\n          mb=\"4\"\n        />\n        <Button type=\"submit\">Add contact</Button>\n      </FormControl>\n    </Box>\n  );\n};\n\nexport default ContactForm;\n","import { useSelector, useDispatch } from 'react-redux';\nimport {\n  Text,\n  IconButton,\n  CloseButton,\n  SimpleGrid,\n  Card,\n  CardBody,\n  CardHeader,\n} from '@chakra-ui/react';\nimport {\n  selectStatusFilter,\n  selectContacts,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectStatusFilter);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = id => dispatch(deleteContact(id));\n\n  const filteredContacts = contacts.filter(\n    contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()) ||\n      contact.number.includes(filter)\n  );\n\n  return (\n    <>\n      {isLoading ? (\n        <Text>Loading...</Text>\n      ) : (\n        <SimpleGrid columns={5} spacing={10} overflow=\"hidden\">\n          {filteredContacts.length > 0 ? (\n            filteredContacts.map(({ id, name, number }) => (\n              <Card key={id}>\n                <CardHeader>\n                  <IconButton\n                    icon={<CloseButton />}\n                    onClick={() => handleDeleteContact(id)}\n                  />\n                </CardHeader>\n                <CardBody>\n                  <Text>{name}</Text>\n                  <Text>{number}</Text>\n                </CardBody>\n              </Card>\n            ))\n          ) : (\n            <Text>No contacts found</Text>\n          )}\n        </SimpleGrid>\n      )}\n    </>\n  );\n};\n\nexport default ContactList;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Input, FormControl, FormLabel } from '@chakra-ui/react';\n\nimport { setFilter } from 'redux/contacts/filtersSlice';\nimport { selectStatusFilter } from 'redux/contacts/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    const value = e.target.value.toLowerCase();\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <FormControl id=\"filter\" mb=\"5\">\n      <FormLabel>Search list:</FormLabel>\n      <Input\n        type=\"search\"\n        name=\"filter\"\n        value={useSelector(selectStatusFilter)}\n        onChange={onChange}\n        placeholder=\"Find contacts by name or phone number\"\n        required\n      />\n    </FormControl>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\n\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\n\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Helmet>\n        <h1>Phonebook</h1>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      {isLoading ? null : <Filter />}\n      <ContactList />\n    </div>\n  );\n};\n\nexport default App;\n"],"names":["selectContacts","state","contacts","items","selectStatusFilter","filter","selectIsLoading","isLoading","COUNTRIES","sc","getCountryTelCode","country","find","iso","prefix","PhoneNumberInput","size","value","options","onChange","placeholder","rest","useState","number","setNumber","selectedCountry","setSelectedCountry","countryCode","setCountryCode","useEffect","width","top","left","zIndex","bottom","opacity","height","position","e","target","code","parsedNumber","AsYouType","input","map","option","label","pl","alignItems","mr","flex","name","I","type","pattern","defaultProps","useSelector","dispatch","useDispatch","countryOptions","setValue","as","onSubmit","preventDefault","form","nameOnTheList","some","contact","toLowerCase","newContact","alert","addContact","reset","my","htmlFor","maxlength","title","required","mb","filteredContacts","includes","columns","spacing","overflow","length","id","icon","onClick","deleteContact","handleDeleteContact","setFilter","fetchContacts","Helmet"],"sourceRoot":""}