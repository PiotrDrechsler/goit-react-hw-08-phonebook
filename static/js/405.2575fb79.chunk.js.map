{"version":3,"file":"static/js/405.2575fb79.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","../node_modules/@chakra-ui/layout/dist/chunk-5FO2ZLZM.mjs","../node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","../node_modules/@chakra-ui/layout/dist/chunk-QJDVAY5Z.mjs","../node_modules/@chakra-ui/card/dist/chunk-4DHADF5X.mjs","../node_modules/@chakra-ui/card/dist/chunk-S432VF2S.mjs","../node_modules/@chakra-ui/card/dist/chunk-W3H6TFKV.mjs","../node_modules/@chakra-ui/button/dist/chunk-3HSDMH4Y.mjs","../node_modules/@chakra-ui/card/dist/chunk-KKEJMMX3.mjs","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectStatusFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { FormControl, FormLabel, Input, Button, Box } from '@chakra-ui/react';\n\nconst ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleAddContact = e => {\n    e.preventDefault();\n\n    const form = e.target;\n    const name = e.target.name.value;\n    const number = e.target.number.value;\n    const nameOnTheList = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    const newContact = {\n      name: name,\n      number: number,\n    };\n\n    if (!nameOnTheList) {\n      dispatch(addContact(newContact));\n      form.reset();\n    } else {\n      alert(`${name} is in use. Try another name.`);\n    }\n  };\n\n  return (\n    <Box as=\"form\" onSubmit={handleAddContact} my=\"10\">\n      <FormControl>\n        <FormLabel htmlFor=\"name\">Name</FormLabel>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          maxlength=\"30\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          placeholder=\"e.g. John Doe\"\n          required\n          mb=\"4\"\n        />\n      </FormControl>\n      <FormControl>\n        <FormLabel htmlFor=\"number\">Number</FormLabel>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          maxlength=\"30\"\n          pattern=\"(-)?\\d{1,}|(-)?\\d{1,}(\\.)\\d{1,}|(-)?\\d{1,}(\\s)(-)?\\d{1,}|(-)?\\d{1,}(\\s)(-)?\\d{1,}(\\s)(-)?\\d{1,}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          placeholder=\"e.g. 123-456-789\"\n          required\n          mb=\"4\"\n        />\n        <Button type=\"submit\">Add contact</Button>\n      </FormControl>\n    </Box>\n  );\n};\n\nexport default ContactForm;\n","// src/grid.tsx\nimport {\n  chakra,\n  forwardRef\n} from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Grid = forwardRef(function Grid2(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props;\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns\n  };\n  return /* @__PURE__ */ jsx(chakra.div, { ref, __css: styles, ...rest });\n});\nGrid.displayName = \"Grid\";\n\nexport {\n  Grid\n};\n","// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","import {\n  Grid\n} from \"./chunk-5FO2ZLZM.mjs\";\n\n// src/simple-grid.tsx\nimport {\n  forwardRef,\n  getToken,\n  useTheme\n} from \"@chakra-ui/system\";\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar SimpleGrid = forwardRef(\n  function SimpleGrid2(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } = props;\n    const theme = useTheme();\n    const templateColumns = minChildWidth ? widthToColumns(minChildWidth, theme) : countToColumns(columns);\n    return /* @__PURE__ */ jsx(\n      Grid,\n      {\n        ref,\n        gap: spacing,\n        columnGap: spacingX,\n        rowGap: spacingY,\n        templateColumns,\n        ...rest\n      }\n    );\n  }\n);\nSimpleGrid.displayName = \"SimpleGrid\";\nfunction toPx(n) {\n  return typeof n === \"number\" ? `${n}px` : n;\n}\nfunction widthToColumns(width, theme) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme);\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`;\n  });\n}\nfunction countToColumns(count) {\n  return mapResponsive(\n    count,\n    (value) => value === null ? null : `repeat(${value}, minmax(0, 1fr))`\n  );\n}\n\nexport {\n  SimpleGrid\n};\n","// src/card-context.tsx\nimport { createStylesContext } from \"@chakra-ui/system\";\nvar [CardStylesProvider, useCardStyles] = createStylesContext(\"Card\");\n\nexport {\n  CardStylesProvider,\n  useCardStyles\n};\n","import {\n  CardStylesProvider\n} from \"./chunk-4DHADF5X.mjs\";\n\n// src/card.tsx\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport {\n  forwardRef,\n  chakra,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Card = forwardRef(function Card2(props, ref) {\n  const {\n    className,\n    children,\n    direction = \"column\",\n    justify,\n    align,\n    ...rest\n  } = omitThemingProps(props);\n  const styles = useMultiStyleConfig(\"Card\", props);\n  return /* @__PURE__ */ jsx(\n    chakra.div,\n    {\n      ref,\n      className: cx(\"chakra-card\", className),\n      __css: {\n        display: \"flex\",\n        flexDirection: direction,\n        justifyContent: justify,\n        alignItems: align,\n        position: \"relative\",\n        minWidth: 0,\n        wordWrap: \"break-word\",\n        ...styles.container\n      },\n      ...rest,\n      children: /* @__PURE__ */ jsx(CardStylesProvider, { value: styles, children })\n    }\n  );\n});\n\nexport {\n  Card\n};\n","import {\n  useCardStyles\n} from \"./chunk-4DHADF5X.mjs\";\n\n// src/card-header.tsx\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { forwardRef, chakra } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar CardHeader = forwardRef(\n  function CardHeader2(props, ref) {\n    const { className, ...rest } = props;\n    const styles = useCardStyles();\n    return /* @__PURE__ */ jsx(\n      chakra.div,\n      {\n        ref,\n        className: cx(\"chakra-card__header\", className),\n        __css: styles.header,\n        ...rest\n      }\n    );\n  }\n);\n\nexport {\n  CardHeader\n};\n","import {\n  Button\n} from \"./chunk-NAA7TEES.mjs\";\n\n// src/icon-button.tsx\nimport { forwardRef } from \"@chakra-ui/system\";\nimport { cloneElement, isValidElement } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar IconButton = forwardRef(\n  (props, ref) => {\n    const { icon, children, isRound, \"aria-label\": ariaLabel, ...rest } = props;\n    const element = icon || children;\n    const _children = isValidElement(element) ? cloneElement(element, {\n      \"aria-hidden\": true,\n      focusable: false\n    }) : null;\n    return /* @__PURE__ */ jsx(\n      Button,\n      {\n        padding: \"0\",\n        borderRadius: isRound ? \"full\" : void 0,\n        ref,\n        \"aria-label\": ariaLabel,\n        ...rest,\n        children: _children\n      }\n    );\n  }\n);\nIconButton.displayName = \"IconButton\";\n\nexport {\n  IconButton\n};\n","import {\n  useCardStyles\n} from \"./chunk-4DHADF5X.mjs\";\n\n// src/card-body.tsx\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { forwardRef, chakra } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar CardBody = forwardRef(function CardBody2(props, ref) {\n  const { className, ...rest } = props;\n  const styles = useCardStyles();\n  return /* @__PURE__ */ jsx(\n    chakra.div,\n    {\n      ref,\n      className: cx(\"chakra-card__body\", className),\n      __css: styles.body,\n      ...rest\n    }\n  );\n});\n\nexport {\n  CardBody\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport {\n  Text,\n  IconButton,\n  CloseButton,\n  SimpleGrid,\n  Card,\n  CardBody,\n  CardHeader,\n} from '@chakra-ui/react';\nimport {\n  selectStatusFilter,\n  selectContacts,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectStatusFilter);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = id => dispatch(deleteContact(id));\n\n  const filteredContacts = contacts.filter(\n    contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()) ||\n      contact.number.includes(filter)\n  );\n\n  return (\n    <>\n      {isLoading ? (\n        <Text>Loading...</Text>\n      ) : (\n        <SimpleGrid columns={5} spacing={10} overflow=\"hidden\">\n          {filteredContacts.length > 0 ? (\n            filteredContacts.map(({ id, name, number }) => (\n              <Card key={id}>\n                <CardHeader>\n                  <IconButton\n                    icon={<CloseButton />}\n                    onClick={() => handleDeleteContact(id)}\n                  />\n                </CardHeader>\n                <CardBody>\n                  <Text>{name}</Text>\n                  <Text>{number}</Text>\n                </CardBody>\n              </Card>\n            ))\n          ) : (\n            <Text>No contacts found</Text>\n          )}\n        </SimpleGrid>\n      )}\n    </>\n  );\n};\n\nexport default ContactList;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Input, FormControl, FormLabel } from '@chakra-ui/react';\n\nimport { setFilter } from 'redux/contacts/filtersSlice';\nimport { selectStatusFilter } from 'redux/contacts/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    const value = e.target.value.toLowerCase();\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <FormControl id=\"filter\" mb=\"5\">\n      <FormLabel>Search list:</FormLabel>\n      <Input\n        type=\"search\"\n        name=\"filter\"\n        value={useSelector(selectStatusFilter)}\n        onChange={onChange}\n        placeholder=\"Find contacts by name or phone number\"\n        required\n      />\n    </FormControl>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\n\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\n\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Helmet>\n        <h1>Phonebook</h1>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      {isLoading ? null : <Filter />}\n      <ContactList />\n    </div>\n  );\n};\n\nexport default App;\n"],"names":["selectContacts","state","contacts","items","selectStatusFilter","filter","selectIsLoading","isLoading","useSelector","dispatch","useDispatch","as","onSubmit","e","preventDefault","form","target","name","value","number","nameOnTheList","some","contact","toLowerCase","newContact","alert","addContact","reset","my","htmlFor","I","type","maxlength","title","placeholder","required","mb","pattern","Grid","forwardRef","props","ref","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","rest","styles","display","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","jsx","chakra","__css","displayName","Object","freeze","mapResponsive","prop","mapper","Array","isArray","map","item","isObject","keys","reduce","result","key","SimpleGrid","columns","spacingX","spacingY","spacing","minChildWidth","theme","useTheme","width","n","_value","getToken","widthToColumns","createStylesContext","CardStylesProvider","useCardStyles","Card","omitThemingProps","className","children","direction","justify","align","useMultiStyleConfig","cx","flexDirection","justifyContent","alignItems","position","minWidth","wordWrap","container","CardHeader","header","IconButton","icon","isRound","ariaLabel","element","_children","isValidElement","cloneElement","focusable","Button","padding","borderRadius","CardBody","body","filteredContacts","includes","overflow","length","id","onClick","deleteContact","handleDeleteContact","onChange","setFilter","useEffect","fetchContacts","Helmet"],"sourceRoot":""}