{"version":3,"file":"static/js/765.fae6fbdc.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","../node_modules/@chakra-ui/layout/dist/chunk-5FO2ZLZM.mjs","../node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","../node_modules/@chakra-ui/layout/dist/chunk-QJDVAY5Z.mjs","../node_modules/@chakra-ui/button/dist/chunk-3HSDMH4Y.mjs","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectStatusFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { FormControl, FormLabel, Input, Button, Flex } from '@chakra-ui/react';\n\nconst ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleAddContact = e => {\n    e.preventDefault();\n\n    const form = e.target;\n    const name = e.target.name.value;\n    const number = e.target.number.value;\n    const nameOnTheList = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    const newContact = {\n      name: name,\n      number: number,\n    };\n\n    if (!nameOnTheList) {\n      dispatch(addContact(newContact));\n      form.reset();\n    } else {\n      alert(`${name} is in use. Try another name.`);\n    }\n  };\n\n  return (\n    <Flex direction=\"column\" align=\"center\" my=\"10\">\n      <FormControl as=\"form\" onSubmit={handleAddContact}>\n        <FormLabel htmlFor=\"name\">Name</FormLabel>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          maxlength=\"30\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          placeholder=\"e.g. John Doe\"\n          required\n          mb=\"4\"\n        />\n        <FormLabel htmlFor=\"number\">Number</FormLabel>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          maxlength=\"30\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          placeholder=\"e.g. 123-456-789\"\n          required\n          mb=\"4\"\n        />\n        <Button variant=\"solid\" type=\"submit\">\n          Add contact\n        </Button>\n      </FormControl>\n    </Flex>\n  );\n};\n\nexport default ContactForm;\n","// src/grid.tsx\nimport {\n  chakra,\n  forwardRef\n} from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Grid = forwardRef(function Grid2(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props;\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns\n  };\n  return /* @__PURE__ */ jsx(chakra.div, { ref, __css: styles, ...rest });\n});\nGrid.displayName = \"Grid\";\n\nexport {\n  Grid\n};\n","// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","import {\n  Grid\n} from \"./chunk-5FO2ZLZM.mjs\";\n\n// src/simple-grid.tsx\nimport {\n  forwardRef,\n  getToken,\n  useTheme\n} from \"@chakra-ui/system\";\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar SimpleGrid = forwardRef(\n  function SimpleGrid2(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } = props;\n    const theme = useTheme();\n    const templateColumns = minChildWidth ? widthToColumns(minChildWidth, theme) : countToColumns(columns);\n    return /* @__PURE__ */ jsx(\n      Grid,\n      {\n        ref,\n        gap: spacing,\n        columnGap: spacingX,\n        rowGap: spacingY,\n        templateColumns,\n        ...rest\n      }\n    );\n  }\n);\nSimpleGrid.displayName = \"SimpleGrid\";\nfunction toPx(n) {\n  return typeof n === \"number\" ? `${n}px` : n;\n}\nfunction widthToColumns(width, theme) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme);\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`;\n  });\n}\nfunction countToColumns(count) {\n  return mapResponsive(\n    count,\n    (value) => value === null ? null : `repeat(${value}, minmax(0, 1fr))`\n  );\n}\n\nexport {\n  SimpleGrid\n};\n","import {\n  Button\n} from \"./chunk-NAA7TEES.mjs\";\n\n// src/icon-button.tsx\nimport { forwardRef } from \"@chakra-ui/system\";\nimport { cloneElement, isValidElement } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar IconButton = forwardRef(\n  (props, ref) => {\n    const { icon, children, isRound, \"aria-label\": ariaLabel, ...rest } = props;\n    const element = icon || children;\n    const _children = isValidElement(element) ? cloneElement(element, {\n      \"aria-hidden\": true,\n      focusable: false\n    }) : null;\n    return /* @__PURE__ */ jsx(\n      Button,\n      {\n        padding: \"0\",\n        borderRadius: isRound ? \"full\" : void 0,\n        ref,\n        \"aria-label\": ariaLabel,\n        ...rest,\n        children: _children\n      }\n    );\n  }\n);\nIconButton.displayName = \"IconButton\";\n\nexport {\n  IconButton\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport {\n  Flex,\n  Box,\n  Text,\n  IconButton,\n  CloseButton,\n  SimpleGrid,\n} from '@chakra-ui/react';\nimport {\n  selectStatusFilter,\n  selectContacts,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectStatusFilter);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = id => dispatch(deleteContact(id));\n\n  const filteredContacts = contacts.filter(\n    contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()) ||\n      contact.number.includes(filter)\n  );\n\n  return (\n    <>\n      {isLoading ? (\n        <Text>Loading...</Text>\n      ) : (\n        <SimpleGrid columns={5} spacing={10} overflow=\"hidden\">\n          {filteredContacts.length > 0 ? (\n            filteredContacts.map(({ id, name, number }) => (\n              <Box\n                key={id}\n                borderWidth=\"1px\"\n                borderRadius=\"lg\"\n                overflow=\"hidden\"\n                my=\"2\"\n              >\n                <Flex alignItems=\"center\" justifyContent=\"space-between\" p=\"2\">\n                  <Text>{name}</Text>\n                  <IconButton\n                    icon={<CloseButton />}\n                    onClick={() => handleDeleteContact(id)}\n                  />\n                </Flex>\n                <Box p=\"2\">\n                  <Text>{number}</Text>\n                </Box>\n              </Box>\n            ))\n          ) : (\n            <Text>No contacts found</Text>\n          )}\n        </SimpleGrid>\n      )}\n    </>\n  );\n};\n\nexport default ContactList;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Input, FormControl, FormLabel } from '@chakra-ui/react';\n\nimport { setFilter } from 'redux/contacts/filtersSlice';\nimport { selectStatusFilter } from 'redux/contacts/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    const value = e.target.value.toLowerCase();\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <FormControl id=\"filter\" mb=\"5\">\n      <FormLabel>Search list:</FormLabel>\n      <Input\n        type=\"search\"\n        name=\"filter\"\n        value={useSelector(selectStatusFilter)}\n        onChange={onChange}\n        placeholder=\"Find contacts by name or phone number\"\n      />\n    </FormControl>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\n\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\n\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Helmet>\n        <h1>Phonebook</h1>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      {isLoading ? null : <Filter />}\n      <ContactList />\n    </div>\n  );\n};\n\nexport default App;\n"],"names":["selectContacts","state","contacts","items","selectStatusFilter","filter","selectIsLoading","isLoading","useSelector","dispatch","useDispatch","direction","align","my","as","onSubmit","e","preventDefault","form","target","name","value","number","nameOnTheList","some","contact","toLowerCase","newContact","alert","addContact","reset","htmlFor","I","type","maxlength","title","placeholder","required","mb","pattern","variant","Grid","forwardRef","props","ref","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","rest","styles","display","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","jsx","chakra","__css","displayName","Object","freeze","mapResponsive","prop","mapper","Array","isArray","map","item","isObject","keys","reduce","result","key","SimpleGrid","columns","spacingX","spacingY","spacing","minChildWidth","theme","useTheme","width","n","_value","getToken","widthToColumns","IconButton","icon","children","isRound","ariaLabel","element","_children","isValidElement","cloneElement","focusable","Button","padding","borderRadius","filteredContacts","includes","overflow","length","id","borderWidth","alignItems","justifyContent","p","onClick","deleteContact","handleDeleteContact","onChange","setFilter","useEffect","fetchContacts","Helmet"],"sourceRoot":""}